import telebot, requests, re, json
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

FULL = [5012010632,-1001783823529,-1001824484688,-1002087649012]

bot = telebot.TeleBot("6437385774:AAFTaRB_Iwz-2RWugyGMjEM4_gLCqFIcemM")

@bot.message_handler(commands=['menu', 'help', 'start'])
def bniio(men):
  notbin = []
  bid = men.chat.id
  mensagem = men.text
  if men.text == '/menuu':
    bot.reply_to(men, '<b>' + '‚ö†Ô∏è ERRADO BURRO ‚ö†Ô∏è' + '</b>')
  else:
    try:
      menu = f'''Bem-vindo(a) ao MdzSearch, o bot mais completo de consultas do telegram!
         
üåü‚ú® Aqui voc√™ pode descobrir informa√ß√µes incr√≠veis sobre pessoas, como nome, cpf, idade, cidade, redes sociais e muito mais. 

üïµÔ∏è‚Äç‚ôÄÔ∏èüîç Sinta-se √† vontade para explorar todas as nossas utilidades e divirta-se! 

¬© By: @gringomdz'''
      bot.reply_to(men, menu, parse_mode='HTML', reply_markup=start_markup())
    except:
      bot.reply_to(men, menu)

def start_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
	
    markup.add(InlineKeyboardButton("üîé Consultas", callback_data="consultas"),
    InlineKeyboardButton("üü¢ Dev", url="t.me/gringomdz"),
    InlineKeyboardButton("üî∞ Canal",, url="https://t.me/mdzup"),
    InlineKeyboardButton("‚ùì Deseja fazer Parceria?", callback_data="parceria"))
    return markup

def home_markup():
  markup = InlineKeyboardMarkup()
  markup.row_width = 2


def apagar_markup():
  markup = InlineKeyboardMarkup()
  markup.row_width = 1
  markup.add(
    InlineKeyboardButton(
      "üí≥ COMPRE LOGINS $",
      url="https://t.me/mdzlogins2bot"))
  return markup


def back_markup():
  markup = InlineKeyboardMarkup()
  markup.row_width = 1
  markup.add(InlineKeyboardButton("üîô Voltar", callback_data="back"))
  return markup

def clear_markup(id):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("[ üóë ] Apagar [ üóë ]", callback_data=f"delete {id}"))
    return markup 

def adm_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("üëª Administrador", url="t.me/gringomdz"))
    return markup 

@bot.message_handler(commands=['cpf' , 'Cpf', 'CPF'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/api/consultas?type=cpf1&query=' + ip, token)
                    req = url.json()
                    response = f'''{req["resultado"]}\n\nü§ñ @MDZROBOOTBOT'''
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=clear_markup(nome.from_user.id))

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è CPF N√ÉO ENCONTRADO!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')
                		               		
@bot.message_handler(commands=['cpf2' , 'Cpf2', 'CPF2'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/api/consultas?type=cpf2&query=' + ip, token)
                    req = url.json()
                    response = f'''{req["resultado"]}\n\nü§ñ @MDZROBOOTBOT'''
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=clear_markup(nome.from_user.id))

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è CPF N√ÉO ENCONTRADO!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')                		                		
@bot.message_handler(commands=['cnpj'])
def zn(nome):
  id1 = nome.chat.id

  ltnome = FULL
  if id1 in ltnome:
    try:
      msg = nome.text
      fl = msg.split(' ')
      ip = re.sub('[^0-9]', '', msg)
      url = requests.get('https://www.receitaws.com.br/v1/cnpj/' + ip)
      req = url.json()
      response = f'üîé | CNPJ ENCONTRADO!\n\n‚Ä¢ UF: {req["abertura"]}\n‚Ä¢ SITUA√á√ÉO: {req["situacao"]}\n‚Ä¢ TIPO: {req["tipo"]}\n‚Ä¢ NOME: {req["nome"]}\n‚Ä¢ FANTASIA: {req["fantasia"]}\n‚Ä¢ PORTE: {req["porte"]}\n‚Ä¢ NATUREZA JUR√çDICA: {req["natureza_juridica"]}\n‚Ä¢ LOGRADOURO: {req["logradouro"]}\n‚Ä¢ N√öMERO: {req["numero"]}\n‚Ä¢ MUNIC√çPIO: {req["municipio"]}\n‚Ä¢ BAIRRO: {req["bairro"]}\n‚Ä¢ ESTADO: {req["uf"]}\n‚Ä¢ CEP: {req["cep"]}\n‚Ä¢ TELEFONE: {req["telefone"]}\n‚Ä¢ DT SITUA√á√ÉO: {req["data_situacao"]}\n‚Ä¢ MOTIVO: {req["motivo_situacao"]}\n‚Ä¢ CNPJ: {req["cnpj"]}\n‚Ä¢ √öLTIMA ATUALIZA√á√ÉO: {req["ultima_atualizacao"]}\n\n¬© @mdzmodders'
      bot.send_chat_action(nome.chat.id, 'typing')
      bot.send_chat_action(nome.chat.id, 'typing')
      bot.send_chat_action(nome.chat.id, 'typing')
      bot.send_chat_action(nome.chat.id, 'typing')
      bot.send_chat_action(nome.chat.id, 'typing')
      bot.send_chat_action(nome.chat.id, 'typing')
      bot.reply_to(nome, response, reply_markup=back_markup())

    except Exception as e:
      print(e)
      bot.reply_to(nome, '<b>‚ö†Ô∏è CNPJ N√ÉO ENCONTRADO!</b>', parse_mode='html')
  else:
    bot.reply_to(nome, '„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.'
                 '')
                                 		
@bot.message_handler(commands=['perfil'])
def bniio(men):
  notbin = []
  bid = men.chat.id
  mensagem = men.text
  if men.text == '/menuu':
    bot.reply_to(men, '<b>' + '‚ö†Ô∏è ERRADO BURRO ‚ö†Ô∏è' + '</b>')
  else:
    try:
      menu = f'''‚ö†Ô∏è - N√£o chame se vc estiver com d√∫vidas de como usar o chk ja esta bem explicado qualquer comando do bot. n√£o chame se vc queira comprar ccs pois n√£o vendemos! N√£o chame por qualquer coisa besta pois sera bloqueado chame se realmente for algo importante!!

¬© By: @gringomdz / @mdzup\n\n'''
      bot.reply_to(men, menu, parse_mode='HTML', reply_markup=adm_markup())
    except:
      bot.reply_to(men, menu)                		
                		
@bot.message_handler(commands=['placa', 'placa'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/api/consultas?type=placa&query=' + ip, token)
                    req = url.json()
                    response = f'''{req["resultado"]}'''
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=adm_markup())

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è PLACA N√ÉO ENCONTRADA!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')
                		
@bot.message_handler(commands=['rg', 'rg'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/api/consultas?type=rg&query=' + ip, token)
                    req = url.json()
                    response = f'''{req["resultado"]}'''
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=adm_markup())

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è RG N√ÉO ENCONTRADO!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')                		
@bot.message_handler(commands=['bitly', 'bitly'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/shortlink/bitly?url=' + ip, token)
                    req = url.json()
                    response = f'''{req["result"]}'''
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=adm_markup())

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è RG N√ÉO ENCONTRADO!</b>', parse_mode='html')                		
@bot.message_handler(commands=['score', 'score'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/api/consultas?type=score&query=' + ip, token)
                    req = url.json()
                    response = f'''{req["resultado"]}'''
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=adm_markup())

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è CPF N√ÉO ENCONTRADO!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')                		                		
@bot.message_handler(commands=['disney'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = 'apitoken=keyfree1dia'
                    url = requests.get('https://xanax-apis.online/outros/disney?' + token)
                    req = url.json()
                    response = f'{req["resultado"]}\n\nü§ñ @MDZROBOOTBOT'
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=clear_markup(nome.from_user.id))

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è BIN N√ÉO ENCONTRADA!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')
                		
@bot.message_handler(commands=['proc', 'procurados'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/api/procurados?query=' + ip, token)
                    req = url.json()
                    response = f'''{req["resultado"]}'''
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=adm_markup())

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è IMEI N√ÉO ENCONTRADO!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')                		
@bot.message_handler(commands=['imei', 'imei'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/api/consultas?type=imei&query=' + ip, token)
                    req = url.json()
                    response = f'''{req["resultado"]}'''
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=adm_markup())

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è IMEI N√ÉO ENCONTRADO!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')                		
@bot.message_handler(commands=['cep'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/api/consultas?type=cep&query=' + ip, token)
                    req = url.json()
                    response = f'{req["resultado"]}\n\nü§ñ @MDZROBOOTBOT'
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=clear_markup(nome.from_user.id))

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è CEP N√ÉO ENCONTRADO!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')
				
@bot.message_handler(commands=['beneficio'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/api/consultas?type=beneficios&query=' + ip, token)
                    req = url.json()
                    response = f'{req["resultado"]}\n\nü§ñ @MDZROBOOTBOT'
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=clear_markup(nome.from_user.id))

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è CPF N√ÉO ENCONTRADO!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')
                		
@bot.message_handler(commands=['cnumber'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:4109/api/check-number?query=' + ip, token)
                    req = url.json()
                    response = f'{req["resultado"]}\n\nü§ñ @MDZROBOOTBOT'
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=clear_markup(nome.from_user.id))

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è N√öMERO N√ÉO ENCONTRADO!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')
                		
@bot.message_handler(commands=['gencc'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/api/gerar-cc?query=' + ip, token)
                    req = url.json()
                    response = f'{req["resultado"]}\n\nü§ñ @MDZROBOOTBOT'
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=clear_markup(nome.from_user.id))

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è BIN N√ÉO ENCONTRADA!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')
                 		                		
@bot.message_handler(commands=['telefone2', 'tel2'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/api/consultas?type=telefone&query=' + ip, token)
                    req = url.json()
                    response = f'{req["resultado"]}\n\nü§ñ @MDZROBOOTBOT'
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=clear_markup(nome.from_user.id))

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è TELEFONE N√ÉO ENCONTRADO!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')
                    		                		
@bot.message_handler(commands=['telefone', 'tel'])
def zn(nome):
            id1 = nome.chat.id

            ltnome = FULL
            if id1 in ltnome:
                try:
                    msg = nome.text
                    fl = msg.split(' ')
                    ip = re.sub('[^0-9]', '', msg)
                    token = '&apitoken=keyfree1dia'
                    url = requests.get('http://mdzapi.mdzhost.cloud:5003/api/consultas?type=tel2&query=' + ip, token)
                    req = url.json()
                    response = f'{req["resultado"]}\n\nü§ñ @MDZROBOOTBOT'
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.send_chat_action(nome.chat.id, 'typing')
                    bot.reply_to(nome, response, reply_markup=clear_markup(nome.from_user.id))

                except Exception as e:
                    print(e)
                    bot.reply_to(nome, '<b>‚ö†Ô∏è TELEFONE N√ÉO ENCONTRADO!</b>', parse_mode='html')
            else:
                		bot.reply_to(nome, '''„Äé‚ùó„ÄèEste comando √© apenas para usu√°rios premium.''')

@bot.callback_query_handler(func=lambda call: 'delete' in call.data)
def delete_handler(call):
    chat_id = call.message.chat.id
    if call.from_user.id == int(call.data.split(' ')[1]):
        try:
            bot.delete_message(chat_id, call.message.message_id)
            bot.delete_message(
                chat_id, call.message.reply_to_message.message_id)
            bot.answer_callback_query(call.id, '‚úÖ - Mensagem deletada')
            return
        except Exception as err:
            print('‚ö†Ô∏è - Erro ao apagar mensagem', err)
            return
    bot.answer_callback_query(call.id, '‚ùå - Voc√™ n√£o tem autoriza√ß√£o para isso')
@bot.callback_query_handler(func=lambda call: not "delte" in call.data)
def callback_query(call):

  if call.data == 'consultas':
    return bot.edit_message_text(
      f'''‚òÜ | COMANDOS DO MDZ BUSCAS | ‚òÜ\n\nüîÑ Bases de dados atualizada, servidores otimizados!\n\n> 10 Bases On-line ao Sistema\n\n‚óè | PAR√ÇMETROS | ‚óè\n\nüü¢ STATUS „ÄãONLINE\nüü° STATUS „ÄãMANUTEN√á√ÉO\nüî¥ STATUS „ÄãOFFLINE\n\n‚Ä¢ [ CPF (1) ] ‚Ä¢\n\nüü¢ CPF1: /cpf 05344565828\n/cpf2 11976388732\n\n ‚Ä¢ [ TELEFONES (1) ] ‚Ä¢\n\nüü¢ TELEFONE: /tel
63984367346\n\n[ FOTO (2) ]\n\nüü¢ FOTO RJ:\n/fotope 11374317411\n/fotorj 11976388732\n\n ‚Ä¢ [ NOME (1) ] ‚Ä¢\n\nüü° NOME: /nome Luis Henrique\n\n‚Ä¢ [ SCORE (1) ] ‚Ä¢\n\nüî¥ SCORE: /score 05344565828\n\n‚Ä¢ [ VE√çCULOS (1) ] ‚Ä¢\n\nüî¥ PLACA: /placa OGT0458\n\n‚Ä¢ [ GERAIS (4) ] ‚Ä¢\n\nüü¢ CNPJ: /cnpj 053445628/72628\nüü¢ CEP: /cep 70040010\nüü¢ BIN: /bin 498408\nüî¥ IP: /ip 204.152.203.157\nüü¢ IMEI: /imei 358297063613954\nüü¢ OPERADORA: /op 5582988279194\nüü¢ IA BING: /ia test\n\n‚ö°Ô∏è Use os comandos em Grupos e no Privado do Bot!\n\nüë§ Suporte: @gringomdz\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ''',
      call.message.chat.id,
      call.message.message_id,
      reply_markup=back_markup())

  if call.data == 'back':
    return bot.edit_message_text(
      f'Bem-vindo(a) ao MdzSearch, o bot mais commpleto de consultas do telegram!\n\nüåü‚ú® Aqui voc√™ pode descobrir informa√ß√µes incr√≠veis sobre pessoas, como nome, cpf, idade, cidade, redes sociais e muito mais.\n\nüïµÔ∏è‚Äç‚ôÄÔ∏èüîç Sinta-se √† vontade para explorar todas as nossas utilidades e divirta-se!\n\n¬© By: @gringomdz',
      call.message.chat.id,
      call.message.message_id,
      reply_markup=start_markup())

  if call.data == 'perfil':
    return bot.edit_message_text(
      f'üë§ | Para voc√™ ver as suas informa√ß√µe, digite /perfil no chat!',
      call.message.chat.id,
      call.message.message_id,
      reply_markup=back_markup())

  if call.data == "parceria":
    return bot.edit_message_text(
      "‚ö†Ô∏è ATEN√á√ÉO!!!, DESEJA FECHAR PARCERIA COM OS PROPRIETARIO DESTE BOT COM ALGUMA AJUDA RELACIONADA A API'S, PLANOS DE DIVULGA√á√ïES, ENTRE OUTROS? CHAME NO @ ABAIXO QUE BREVEMENTE NOSSA EQUIPE IR√Å TE RESPONDER!\n\n‚úÖ N√ÉO ME CHAME NO PRIVADO SE N√ÉO FOR FECHAR NADA! CHAMOU N√ÉO DEU A IDEIA PRIORITARIA BLOCK + SPAM!\n\n‚úÖ NOSSA EQUIPE VENDE VARIOS TIPOS DE SOURCE, IREI CITAR ALGUMAS AQUI EM BAIXO:\n\nüí≥ CC AUXILIAR\nüí≥ CC FULL\nüí≥ CONSULTAVEIS\nüí≥ CONSULTADAS\nüéü LOGIN\nü™™ DOCUMENTOS\nüîç CONSULTAS\nüîê CHECKERS\n\n‚úÖ TEMOS VARIAS STORES ATIVAS NESSE EXATO MOMENTO UMA DELAS ESTA OPERANDO NO TOKEN DO: \n\n¬© By: @gringomdz",
      call.message.chat.id,
      call.message.message_id,
      reply_markup=back_markup())    
  
      

print("Estou ON!!")
bot.infinity_polling()









#BY @MDZUP / @GRINGOMDZ